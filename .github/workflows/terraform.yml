provider "aws" {
  region = "us-east-1"
}

# Create VPC and Subnets
module "vpc" {
  source = "terraform-aws-modules/vpc/aws"
  name = "my-vpc"
  cidr = "10.0.0.0/16"
  azs = ["us-east-1a", "us-east-1b", "us-east-1c"]
  private_subnets = ["10.0.1.0/24", "10.0.2.0/24", "10.0.3.0/24"]
  public_subnets = ["10.0.4.0/24", "10.0.5.0/24", "10.0.6.0/24"]
  enable_nat_gateway = true
  single_nat_gateway = true
}

# Create ECS Cluster
resource "aws_ecs_cluster" "my_cluster" {
  name = "${var.environment}-cluster"
}

# Create MongoDB Instance
module "mongodb" {
  source = "terraform-aws-modules/ec2-instance/aws"
  name = "mongodb"
  ami = "ami-0c94855ba95c71c99"
  instance_type = "t3.micro"
  vpc_security_group_ids = [aws_security_group.mongodb_sg.id]
  subnet_id = module.vpc.private_subnets[0]
}

# Create Security Group for MongoDB
resource "aws_security_group" "mongodb_sg" {
  name_prefix = "${var.environment}-mongodb-sg"
  vpc_id = module.vpc.vpc_id
}

# Add Ingress Rule to MongoDB Security Group
resource "aws_security_group_rule" "mongodb_ingress" {
  type = "ingress"
  from_port = 27017
  to_port = 27017
  protocol = "tcp"
  cidr_blocks = ["0.0.0.0/0"]
  security_group_id = aws_security_group.mongodb_sg.id
}

# Create Task Definition
resource "aws_ecs_task_definition" "my_task_definition" {
  family = "my-task-definition"
  network_mode = "awsvpc"
  requires_compatibilities = ["FARGATE"]

  container_definitions = <<DEFINITION
[
  {
    "name": "my-app-container",
    "image": "omark0/palmhr:mobilesearch",
    "essential": true,
    "environment": [
      {
        "name": "MONGODB_HOST",
        "value": "${module.mongodb.private_ip}"
      },
      {
        "name": "MONGODB_PORT",
        "value": "27017"
      }
    ],
    "portMappings": [
      {
        "containerPort": 80,
        "protocol": "tcp"
      }
    ]
  }
]
DEFINITION
}

# Create Service
resource "aws_ecs_service" "my_service" {
  name = "my-service"
  cluster = aws_ecs_cluster.my_cluster.id
  task_definition = aws_ecs_task_definition.my_task_definition.arn
  desired_count = 1
  launch_type = "FARGATE"
  network_configuration {
    security_groups = [aws_security_group.my_app_sg.id]
    subnets = module.vpc.private_subnets
    assign_public_ip = false
  }
}

# Create Security Group for Application
resource "aws_security_group" "my_app_sg" {
  name_prefix = "${var.environment}-my-app-sg"
